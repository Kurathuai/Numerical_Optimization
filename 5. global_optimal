import numpy as np
import matplotlib.pyplot as plt

def objective_function(x):
    return -10 * np.cos(np.pi * x - 2.2) + (x + 1.5) * x

def plot_function():
    x_vals = np.linspace(-5, 5, 100)
    y_vals = objective_function(x_vals)

    plt.plot(x_vals, y_vals, label="f(x) = -10*cos(pi*x - 2.2) + (x + 1.5)*x")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.title("Graphical Representation of the Function")
    plt.axhline(0, color='black',linewidth=0.5)
    plt.axvline(0, color='black',linewidth=0.5)
    plt.legend()
    plt.grid(color = 'gray', linestyle = '--', linewidth = 0.5)
    plt.show()

def find_global_optimal_solution():
    # Let's use a simple brute-force approach to find the minimum value
    x_vals = np.linspace(-5, 5, 100)
    y_vals = objective_function(x_vals)

    min_index = np.argmin(y_vals)
    global_optimal_solution = x_vals[min_index]
    min_value = y_vals[min_index]

    return global_optimal_solution, min_value

def main():
    plot_function()

    global_optimal_solution, min_value = find_global_optimal_solution()
    print(f"Global Optimal Solution: x = {global_optimal_solution}")
    print(f"Minimum Value: f(x) = {min_value}")

if __name__ == "__main__":
    main()
